describe( "Testing the functionality in the vulnerability type reports", function()
{
  var vulnReport = require( '../../../../../controllers/reports/static-analysis/vulnerability-type-report.js' );
  var helper = require( '../../../../../models/helpers.js' );
  var accessMongo = require( '../../../../../models/pull-report-data.js' );
  var event = require( 'events' );
  var xssUtil = require( '../../../../../models/security/xss-util.js' );
  
  var config, response, request;
  
  var any = jasmine.any( Object );
  
  beforeEach( function() 
  {
    config = {
      _logs : {
        info : {
          log : function( a, b, c ) {}
        },
        security : {
          log : function( a, b, c ) {}
        },
        exceptions : {
          log : function( a, b, c ) {}
        } 
      }
    };
    
    request = {
      method : "GET",
      url : "/report",
      query : {
        report : "vulnType",
        conf : "Vulnerability",
        sev : "High"
      },
      session : {
        username : 'test'
      }
    };
    
    spyOn( xssUtil, 'isValidLongString' ).andReturn( true );
    
    helper.setConfig( config );
    response = jasmine.createSpyObj( "response", [ "render", "redirect" ] );
  } );
  
  describe( "Testing the request for the vulnerability type report", function()
  {
    beforeEach( function()
    {
      spyOn( vulnReport, 'renderVulnerabilityReport' );
      
      spyOn( accessMongo, "complexAggregation" ).andCallFake( function( collection, pipeline, emitter ) {
        var results = [
          { "_id" : { "vtype" : "Validation.Required", "status" : [] }, "count" : 2 },
          { "_id" : { "vtype" : "Validation.Required", "status" : [ "valid" ] }, "count" : 1 },
          { "_id" : { "vtype" : "Validation.Required", "status" : [ "false_positive" ] }, "count" : 3 }
        ];
        
        emitter.emit( "results from complex group query found", results );
      } );  
    } );
    
    it( "by default, runs the vulnerability type report", function()
    {
      request.query.vtype = null;
      
      var match = { $match : { "conf" : { $in : [ "Vulnerability" ] }, "sev" : { $in : [ "High" ] } } };
      var group = { 
        $group : { 
          _id : { 
            vtype : "$vtype", 
            ln : "$ln", 
            method : "$method", 
            file : "$file_path", 
            application_name : "$application_name" 
          }, 
          status : { 
            $push : "$review.status" 
          } 
        } 
      };
      
      results = [
          { "_id" : { "vtype" : "Validation.Required", "status" : [] }, "count" : 2 },
          { "_id" : { "vtype" : "Validation.Required", "status" : [ "valid" ] }, "count" : 1 },
          { "_id" : { "vtype" : "Validation.Required", "status" : [ "false_positive" ] }, "count" : 3 }
        ];
      
      var group2 = { $group : { _id : { vtype : "$_id.vtype", status : "$status" }, count : { $sum : 1 } } };
      var sort = { $sort : { "_id.vtype" : 1 } };

      var expectedPipeline = [ match, group, group2, sort ];
      
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).not.toThrow();
      expect( response.redirect ).not.toHaveBeenCalled();
      expect( accessMongo.complexAggregation ).toHaveBeenCalledWith( any, expectedPipeline, any );
      expect( vulnReport.renderVulnerabilityReport ).toHaveBeenCalledWith( request, response, results );
    } );
    
    it( "throws an error if the conf or sev parameter is not an array", function()
    {      
      xssUtil.isValidLongString.andCallFake( function( param )
      {
        if( param == "Vulnerability" )
        {
          return false;
        }
        
        return true;
      } );
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      xssUtil.isValidLongString.andReturn( true );
      request.query.conf = 1;
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.conf = true;
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.conf = {};
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.conf = function() {};;
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.conf = [];
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.conf = "Vulnerability";
      
      xssUtil.isValidLongString.andCallFake( function( param )
      {
        if( param == "High" )
        {
          return false;
        }
        
        return true;
      } );
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      xssUtil.isValidLongString.andReturn( true );
      request.query.sev = 1;
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.sev = true;
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.sev = {};
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.sev = function() {};
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      request.query.sev = [];
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      expect( response.redirect.callCount ).toEqual( 12 );
      expect( vulnReport.renderVulnerabilityReport ).not.toHaveBeenCalled();
    } );
    
    it( "throws an error if vtype exists, and is not a valid string", function()
    {
      request.query.vtype = "vtype";
      
      xssUtil.isValidLongString.andCallFake( function( param )
      {
        if( param == "vtype" )
        {
          return false;
        }
        
        return true;
      } );
      
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).toThrow();
      expect( accessMongo.complexAggregation ).not.toHaveBeenCalled();
    } );
    
    it( "obtains the vtype report if vtype exists", function()
    {
      request.query.vtype = "vtype";
      var expectedEquals =  { $match : { "conf" : { $in : [ "Vulnerability" ] }, "sev" : { $in : [ "High" ] }, "vtype" : "vtype" } };
      var expectedGroup2 = { $group : { _id : { method : "$_id.method", status : "$status" }, count : { $sum : 1 } } };
      
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).not.toThrow();
      expect( accessMongo.complexAggregation.calls[ 0 ].args[ 1 ][ 0 ] ).toEqual( expectedEquals );
      expect( accessMongo.complexAggregation.calls[ 0 ].args[ 1 ][ 2 ] ).toEqual( expectedGroup2 );      
    } );
    
    it( "will add a minimum and maximum date to the match portion of the query if specified", function()
    {
      var expectedMatch = {
        $match : {
          conf : { $in : jasmine.any( Array ) },
          sev : { $in : jasmine.any( Array ) },
          _id : { $gte : 0, $lte : 0 }
        }
      };
      
      spyOn( helper, 'createObjectidTimestamp' ).andReturn( 0 );
      accessMongo.complexAggregation.andCallFake( function() {} );
      
      expect( function() { vulnReport.vulnerabilityTypeReport( request, response, any ); } ).not.toThrow();
      expect( accessMongo.complexAggregation.calls[ 0 ].args[ 1 ][ 0 ] ).toEqual( expectedMatch );
    } );
  } );
  
  describe( "Testing the rendering of the vulnerability type report", function()
  {    
    it( "renders the report if successful", function()
    {
      var results = [
        { "_id" : { "vtype" : "Validation.Required", "status" : [] }, "count" : 2 },
        { "_id" : { "vtype" : "Validation.Required", "status" : [ "valid" ] }, "count" : 1 },
        { "_id" : { "vtype" : "Validation.Required", "status" : [ "false_positive" ] }, "count" : 3 },
        { "_id" : { "vtype" : "Validation.Required.Test", "status" : [] }, "count" : 2 },
        { "_id" : { "vtype" : "Validation.Required.Test", "status" : [ "valid" ] }, "count" : 1 },
        { "_id" : { "vtype" : "Validation.Required.Test", "status" : [ "false_positive" ] }, "count" : 3 }
      ];
      
      var data = [
        {
          categoryName : "Validation.Required",
          unreviewed : 2,
          valid : 1,
          fp : 3,
          total : 6
        },
        {
          categoryName : "Validation.Required.Test",
          unreviewed : 2,
          valid : 1,
          fp : 3,
          total : 6
        }
      ];
      
      var reportData = {
        categoryField : "categoryName",
        valueFields : [ { id : 'unreviewed', label : "Unreviewed" }, 
          { id : 'valid', label : "Valid Issues" }, 
          { id : 'fp', label : "False Positives" }, 
          { id : 'total', label : "Total Findings" } 
        ],
        data : data, 
        reportTitle : "Vulnerability Type Report: Quality Results",
        yTitle : "Number of Findings",
        pixels : 200
      };
      
      expect( function() { vulnReport.renderVulnerabilityReport( request, response, results ); } ).not.toThrow();
      expect( response.render ).toHaveBeenCalledWith( "bar-graph-with-selectors.jade", reportData );
    } );
    
    it( "renders a vulnerability method report if _id.method exists instead of _id.vtype", function()
    {
      var results = [
        { "_id" : { "method" : "Validation.Required", "status" : [] }, "count" : 2 },
        { "_id" : { "method" : "Validation.Required", "status" : [ "valid" ] }, "count" : 1 },
        { "_id" : { "method" : "Validation.Required", "status" : [ "false_positive" ] }, "count" : 3 },
        { "_id" : { "method" : "Validation.Required.Test", "status" : [] }, "count" : 2 },
        { "_id" : { "method" : "Validation.Required.Test", "status" : [ "valid" ] }, "count" : 1 },
        { "_id" : { "method" : "Validation.Required.Test", "status" : [ "false_positive" ] }, "count" : 3 }
      ];
     
      var data = [
        {
          categoryName : "Validation.Required",
          unreviewed : 2,
          valid : 1,
          fp : 3,
          total : 6
        },
        {
          categoryName : "Validation.Required.Test",
          unreviewed : 2,
          valid : 1,
          fp : 3,
          total : 6
        }
      ];
      
      var reportData = {
        categoryField : "categoryName",
        valueFields : [ { id : 'unreviewed', label : "Unreviewed" }, 
          { id : 'valid', label : "Valid Issues" }, 
          { id : 'fp', label : "False Positives" }, 
          { id : 'total', label : "Total Findings" } 
        ],
        data : data, 
        reportTitle : "Vulnerability Method Report: Quality Results",
        yTitle : "Number of Findings",
        pixels : 200
      };
      
      expect( function() { vulnReport.renderVulnerabilityReport( request, response, results ); } ).not.toThrow();
      expect( response.render ).toHaveBeenCalledWith( "bar-graph-with-selectors.jade", reportData );
    } );
  } );
} );
